//extends layout

head
    link(rel='stylesheet', href='css/main.css')
    script(src='js/lib/AgoraRTCSDK-2.1.0.js')
    script(src='js/lib/CustomAgora.js')
    script(src='js/lib/jquery-3.1.1.min.js')
    script(src='js/lib/bootstrap.min.js')

body




block content
    .page-header
        h1 AGORA API INTEGRATION
        style.
            h1 {
                text-align: center;
                color: deepskyblue;
            }


#div_device.panel.panel-default
    .select
        label(for='audioSource') Audio source:
        select#audioSource
    .select
        label(for='videoSource') Video source:
        select#videoSource
#div_join.panel.panel-default
    .panel-body
        | Key:
        input#key(type='text', value='0792d722710e4a189212579c095677fb', size='36')
        | Channel:
        input#channel(type='text', value='1000', size='4')
        | Host:
        input#video(type='checkbox', checked='')
        button#join.btn.btn-primary(onclick='join()') Join
        button#leave.btn.btn-primary(onclick='leave()') Leave
        button#publish.btn.btn-primary(onclick='publish()') Publish
        button#unpublish.btn.btn-primary(onclick='unpublish()') Unpublish
        style.
            button {
                margin-left: 15px;
                color: blue;
            }
            input,select,label {
                margin-left: 15px;
            }



#video(style='margin:0 auto;')
    #agora_local(style='float:left;width:710px;height:100%;display:inline-block;margin-left:250px')

script(language='javascript').
    if (!AgoraRTC.checkSystemRequirements()) {
        alert("browser is no support webRTC");
    }

    var client, localStream, camera, microphone;
    var audioSelect = document.querySelector('select#audioSource');
    var videoSelect = document.querySelector('select#videoSource');
    function join() {
        document.getElementById("join").disabled = true;
        document.getElementById("video").disabled = true;
        var channel_key = null;
        console.log("Init AgoraRTC client with vendor key: " + key.value);
        client = AgoraRTC.createClient({mode: 'interop'});
        client.init(key.value, function () {
            console.log("AgoraRTC client initialized");
            client.join(channel_key, channel.value, null, function (uid) {
                alert("User " + uid + " joined the channel " + channel.value +" successfully");
              //  document.getElementById("video").innerHTML = uid;
                if (document.getElementById("video").checked) {
                    camera = videoSource.value;
                    microphone = audioSource.value;
                    localStream = AgoraRTC.createStream({
                        streamID: uid,
                        audio: true,
                        cameraId: camera,
                        microphoneId: microphone,
                        video: document.getElementById("video").checked,
                        screen: false
                    });
                    //localStream = AgoraRTC.createStream({streamID: uid, audio: false, cameraId: camera, microphoneId: microphone, video: false, screen: true, extensionId: 'minllpmhdgpndnkomcoccfekfegnlikg'});
                    if (document.getElementById("video").checked) {
                        localStream.setVideoProfile('720p_3');
                    }
                    // The user has granted access to the camera and mic.
                    localStream.on("accessAllowed", function () {
                        alert("Click OK to enable camera");
                        console.log("accessAllowed");
                    });
                    // The user has denied access to the camera and mic.
                    localStream.on("accessDenied", function () {
                        console.log("accessDenied");
                    });
                    localStream.init(function () {
                        console.log("getUserMedia successfully");
                        localStream.play('agora_local');
                        client.publish(localStream, function (err) {
                            console.log("Publish local stream error: " + err);
                        });
                        client.on('stream-published', function (evt) {
                            console.log("Publish local stream successfully");
                        });
                    }, function (err) {
                        console.log("getUserMedia failed", err);
                    });
                }
            }, function (err) {
                console.log("Join channel failed", err);
            });
        }, function (err) {
            console.log("AgoraRTC client init failed", err);
        });
        channelKey = "";
        client.on('error', function (err) {
            console.log("Got error msg:", err.reason);
            if (err.reason === 'DYNAMIC_KEY_TIMEOUT') {
                client.renewChannelKey(channelKey, function () {
                    console.log("Renew channel key successfully");
                }, function (err) {
                    console.log("Renew channel key failed: ", err);
                });
            }
        });
        client.on('stream-added', function (evt) {
            var stream = evt.stream;
            console.log("New stream added: " + stream.getId());
            console.log("Subscribe ", stream);
            client.subscribe(stream, function (err) {
                console.log("Subscribe stream failed", err);
            });
        });
        client.on('stream-subscribed', function (evt) {
            var stream = evt.stream;
            console.log("Subscribe remote stream successfully: " + stream.getId());
            if ($('div#video #agora_remote' + stream.getId()).length === 0) {
                $('div#video').append('<div id="agora_remote' + stream.getId() + '" style="float:left; width:810px;height:607px;display:inline-block;"></div>');
            }
            stream.play('agora_remote' + stream.getId());
        });
        client.on('stream-removed', function (evt) {
            var stream = evt.stream;
            stream.stop();
            $('#agora_remote' + stream.getId()).remove();
            console.log("Remote stream is removed " + stream.getId());
        });
        client.on('peer-leave', function (evt) {
            var stream = evt.stream;
            if (stream) {
                stream.stop();
                $('#agora_remote' + stream.getId()).remove();
                console.log(evt.uid + " leaved from this channel");
            }
        });
    }
    function leave() {
        document.getElementById("leave").disabled = true;
        client.leave(function () {
            document.getElementById("join").disabled = false;
            document.getElementById("video").disabled = false;
            alert("Leaving Channel");
        }, function (err) {
            console.log("Leave channel failed");
        });
    }
    function publish() {
        document.getElementById("publish").disabled = true;
        document.getElementById("unpublish").disabled = false;
        client.publish(localStream, function (err) {
            console.log("Publish local stream error: " + err);
        });
    }
    function unpublish() {
        document.getElementById("publish").disabled = false;
        document.getElementById("unpublish").disabled = true;
        client.unpublish(localStream, function (err) {
            console.log("Unpublish local stream failed" + err);
        });
    }
    function getDevices() {
        AgoraRTC.getDevices(function (devices) {
            for (var i = 0; i !== devices.length; ++i) {
                var device = devices[i];
                var option = document.createElement('option');
                option.value = device.deviceId;
                if (device.kind === 'audioinput') {
                    option.text = device.label || 'microphone ' + (audioSelect.length + 1);
                    audioSelect.appendChild(option);
                } else if (device.kind === 'videoinput') {
                    option.text = device.label || 'camera ' + (videoSelect.length + 1);
                    videoSelect.appendChild(option);
                } else {
                    console.log('Some other kind of source/device: ', device);
                }
            }
        });
    }
    getDevices();

